esphome:
  name: "esp-filter-fan-01"

preferences:
  flash_write_interval: 30sec

esp8266:
  board: esp12e
  restore_from_flash: true
  early_pin_init: false

logger:

api:
  encryption:
    key: !secret encryption_key

ota:
  password: !secret ota_password

wifi:
  power_save_mode: HIGH
  ssid: !secret wifi_name
  password: !secret wifi_password
  domain: ".iot.internal"

captive_portal:

web_server:
  port: 80
  ota: False

fan:
  - platform: speed
    id: toshiba
    output: custom_fan
    speed_count: 4
    name: "TOSHIBA"
    restore_mode: RESTORE_DEFAULT_OFF

output:
  - { platform: gpio, pin: GPIO16, id: speed1 }
  - { platform: gpio, pin: GPIO14, id: speed2 }
  - { platform: gpio, pin: GPIO12, id: speed3 }
  - { platform: gpio, pin: GPIO13, id: speed4 }

  - platform: template
    id: custom_fan
    type: float
    write_action:
      - lambda: |-
          id(speed1).turn_off();
          id(speed2).turn_off();
          id(speed3).turn_off();
          id(speed4).turn_off();

          if (state == 0.25) {
            id(speed1).turn_on();
          }
          if (state == 0.50) {
            id(speed2).turn_on();
          }
          if (state == 0.75) {
            id(speed3).turn_on();
          }
          if (state == 1) {
            id(speed4).turn_on();
          }

binary_sensor:
  - platform: gpio
    id: onoff
    pin: 
      number: GPIO4
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      - fan.toggle: toshiba

  - platform: gpio
    id: speed_button
    pin:
      number: GPIO5
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 30ms
      - delayed_off: 30ms
    on_press:
      - lambda: |-
          if (not id(toshiba).state) { return; }
          auto call = id(toshiba).turn_on();
          call.set_speed(id(toshiba).speed < 4 ? id(toshiba).speed + 1 : 1);
          call.perform();
